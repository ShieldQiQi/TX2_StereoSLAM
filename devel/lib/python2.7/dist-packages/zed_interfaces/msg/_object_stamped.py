# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zed_interfaces/object_stamped.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class object_stamped(genpy.Message):
  _md5sum = "d424656ac6d81bea041e4eb6457725ad"
  _type = "zed_interfaces/object_stamped"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Standard Header
Header header

# Object label
string label

# Object label ID
int16 label_id

# Object confidence level (1-99)
float32 confidence

# Object centroid
geometry_msgs/Point32 position

# Object velocity
geometry_msgs/Vector3 linear_vel

# Tracking state
# 0 -> OFF (object not valid)
# 1 -> OK
# 2 -> SEARCHING (occlusion occurred, trajectory is estimated)
int8 tracking_state 

# 2D Bounding box projected to Camera image
#      0 ------- 1
#      |         |
#      |         |
#      |         |
#      3 ------- 2
geometry_msgs/Point32[4] bbox_2d

# 3D Bounding box in world frame
#      1 ------- 2
#     /.        /|
#    0 ------- 3 |
#    | .       | |           
#    | 5.......| 6
#    |.        |/       
#    4 ------- 7
geometry_msgs/Point32[8] bbox_3d

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','label','label_id','confidence','position','linear_vel','tracking_state','bbox_2d','bbox_3d']
  _slot_types = ['std_msgs/Header','string','int16','float32','geometry_msgs/Point32','geometry_msgs/Vector3','int8','geometry_msgs/Point32[4]','geometry_msgs/Point32[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,label,label_id,confidence,position,linear_vel,tracking_state,bbox_2d,bbox_3d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_stamped, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.label is None:
        self.label = ''
      if self.label_id is None:
        self.label_id = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.linear_vel is None:
        self.linear_vel = geometry_msgs.msg.Vector3()
      if self.tracking_state is None:
        self.tracking_state = 0
      if self.bbox_2d is None:
        self.bbox_2d = [geometry_msgs.msg.Point32() for _ in range(4)]
      if self.bbox_3d is None:
        self.bbox_3d = [geometry_msgs.msg.Point32() for _ in range(8)]
    else:
      self.header = std_msgs.msg.Header()
      self.label = ''
      self.label_id = 0
      self.confidence = 0.
      self.position = geometry_msgs.msg.Point32()
      self.linear_vel = geometry_msgs.msg.Vector3()
      self.tracking_state = 0
      self.bbox_2d = [geometry_msgs.msg.Point32() for _ in range(4)]
      self.bbox_3d = [geometry_msgs.msg.Point32() for _ in range(8)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h4f3db().pack(_x.label_id, _x.confidence, _x.position.x, _x.position.y, _x.position.z, _x.linear_vel.x, _x.linear_vel.y, _x.linear_vel.z, _x.tracking_state))
      if len(self.bbox_2d) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.bbox_2d), 'self.bbox_2d')))
      for val1 in self.bbox_2d:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      if len(self.bbox_3d) != 8:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (8, len(self.bbox_3d), 'self.bbox_3d')))
      for val1 in self.bbox_3d:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.linear_vel is None:
        self.linear_vel = geometry_msgs.msg.Vector3()
      if self.bbox_2d is None:
        self.bbox_2d = None
      if self.bbox_3d is None:
        self.bbox_3d = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.label_id, _x.confidence, _x.position.x, _x.position.y, _x.position.z, _x.linear_vel.x, _x.linear_vel.y, _x.linear_vel.z, _x.tracking_state,) = _get_struct_h4f3db().unpack(str[start:end])
      self.bbox_2d = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bbox_2d.append(val1)
      self.bbox_3d = []
      for i in range(0, 8):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bbox_3d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h4f3db().pack(_x.label_id, _x.confidence, _x.position.x, _x.position.y, _x.position.z, _x.linear_vel.x, _x.linear_vel.y, _x.linear_vel.z, _x.tracking_state))
      if len(self.bbox_2d) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.bbox_2d), 'self.bbox_2d')))
      for val1 in self.bbox_2d:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      if len(self.bbox_3d) != 8:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (8, len(self.bbox_3d), 'self.bbox_3d')))
      for val1 in self.bbox_3d:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.linear_vel is None:
        self.linear_vel = geometry_msgs.msg.Vector3()
      if self.bbox_2d is None:
        self.bbox_2d = None
      if self.bbox_3d is None:
        self.bbox_3d = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.label_id, _x.confidence, _x.position.x, _x.position.y, _x.position.z, _x.linear_vel.x, _x.linear_vel.y, _x.linear_vel.z, _x.tracking_state,) = _get_struct_h4f3db().unpack(str[start:end])
      self.bbox_2d = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bbox_2d.append(val1)
      self.bbox_3d = []
      for i in range(0, 8):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bbox_3d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_h4f3db = None
def _get_struct_h4f3db():
    global _struct_h4f3db
    if _struct_h4f3db is None:
        _struct_h4f3db = struct.Struct("<h4f3db")
    return _struct_h4f3db
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
